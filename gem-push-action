#!/usr/bin/bash 
set -e -o pipefail

if parse-gemspec --is-pre-release; then
    if [[ $INPUT_PRE_RELEASE != true ]]; then
    echo Ignoring pre-release. Set input pre-release: true, to release
    exit 0
    fi
elif [[ $INPUT_RELEASE != true ]]; then
    echo Ignoring release. Set input release: true, to release
    exit 0
fi

# tee the output to get it in the logs but capture as we can't tell why gem
# push failed from the exit code, so need to grep the output. Gem existing is
# ok, other errors not. Avoids playing games setting up auth up differently for
# gem query.
# Note: the glob is intentially unquoted, we want a glob!
if ! gem push --host "$GEM_HOST" $INPUT_PACKAGE_GLOB | tee push.out; then
    gemerr=$?
    if grep -q "has already been pushed" push.out; then
    echo Gem Already Pushed
    exit 0
    fi
    echo ::error::Gem Push Failed
    sed 's/^/::error::/' push.out
    exit $gemerr
fi

if [[ $INPUT_TAG_RELEASE == true ]]; then
    tagname="v$( parse-gemspec --version )"
    git config user.name "$(git log -1 --pretty=format:%an)"
    git config user.email "$(git log -1 --pretty=format:%ae)"
    git tag -a -m "Gem release $tagname" "$tagname"
    git push origin "$tagname"
fi

exit 0
