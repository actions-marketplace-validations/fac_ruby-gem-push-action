#!/usr/bin/bash 
set -e -o pipefail

# By default read the gem host from the gemspec, if they dont match the push
# will fail! Allow override if GEM_HOST is already exported.
push_host="$(parse-gemspec --push-host)"
export GEM_HOST="${GEM_HOST:-$push_host}"

if parse-gemspec --is-pre-release; then
    if [[ $INPUT_PRE_RELEASE != true ]]; then
    echo "Ignoring pre-release. To release, pass pre-release: true as an input"
    exit 0
    fi
elif [[ $INPUT_RELEASE != true ]]; then
    echo "Ignoring release. To release, pass release: true as an input"
    exit 0
fi

# Capture as we can't tell why gem push failed from the exit code and it logs
# everything to stdout, so need to grep the output. Gem existing is ok, other
# errors not. Avoids playing games setting up auth differently for gem query.
# Note: the glob is intentially unquoted, we want a glob!
if ! gem push --key="$INPUT_KEY_NAME" --host "$GEM_HOST" $INPUT_PACKAGE_GLOB >push.out; then
    gemerr=$?
    sed 's/^Error:/::error::/' push.out
    if grep -q "has already been pushed" push.out; then
        exit 0
    fi
    exit $gemerr
fi

echo "::set-output name=pushed-version::$( parse-gemspec --version )"

if [[ $INPUT_TAG_RELEASE == true ]]; then
    tagname="v$( parse-gemspec --version )"
    git config user.name "$(git log -1 --pretty=format:%an)"
    git config user.email "$(git log -1 --pretty=format:%ae)"
    git tag -a -m "Gem release $tagname" "$tagname"
    git push origin "$tagname"
fi

exit 0
